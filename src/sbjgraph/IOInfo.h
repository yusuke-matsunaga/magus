#ifndef IOINFO_H
#define IOINFO_H

/// @file IOInfo.h
/// @brief IOInfo のヘッダファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2017 Yusuke Matsunaga
/// All rights reserved.

#include "sbj_nsdef.h"


BEGIN_NAMESPACE_YM_SBJ

//////////////////////////////////////////////////////////////////////
/// @class IOInfo IOInfo.h "IOInfo.h"
/// @brief 入出力ノードに関係する情報を表すクラス
///
/// 実際のデータ構造は継承クラスが実装する．
//////////////////////////////////////////////////////////////////////
class IOInfo
{
public:

  /// @brief デストラクタ
  virtual
  ~IOInfo();

  /// @brief ポートに関連付けられている時に true を返す．
  virtual
  bool
  is_port_type() const;

  /// @brief 関連付けられているポートを返す．
  ///
  /// is_port_type() == true の時のみ意味のある関数
  virtual
  SbjPort*
  port() const;

  /// @brief 関連付けられているポート上のビット位置を返す．
  ///
  /// is_port_type() == true の時のみ意味のある関数
  virtual
  ymuint
  port_bitpos() const;

  /// @brief DFFの入力の時 true を返す．
  virtual
  bool
  is_dff_input() const;

  /// @brief DFFの出力の時 true を返す．
  virtual
  bool
  is_dff_output() const;

  /// @brief DFFのクロック端子の時 true を返す．
  virtual
  bool
  is_dff_clock() const;

  /// @brief DFFのリセット端子の時 true を返す．
  virtual
  bool
  is_dff_clear() const;

  /// @brief DFFのセット端子の時 true を返す．
  virtual
  bool
  is_dff_preset() const;

  /// @brief 関連するDFFを返す．
  ///
  /// DFF関係のノードの時のみ意味のある関数．
  virtual
  SbjDff*
  dff() const;

  /// @brief ラッチの入力の時 true を返す．
  virtual
  bool
  is_latch_input() const;

  /// @brief ラッチの出力の時 truue を返す．
  virtual
  bool
  is_latch_output() const;

  /// @brief ラッチのイネーブル端子の時 true を返す．
  virtual
  bool
  is_latch_enable() const;

  /// @brief ラッチのクリア端子の時 true を返す．
  virtual
  bool
  is_latch_clear() const;

  /// @brief ラッチのセット端子の時 true を返す．
  virtual
  bool
  is_latch_preset() const;

  /// @brief 関連付けられているラッチを返す．
  ///
  /// ラッチ関係のノードの時のみ意味のある関数．
  virtual
  SbjLatch*
  latch() const;

};


//////////////////////////////////////////////////////////////////////
/// @class IOPortInfo IOInfo.h "IOInfo.h"
/// @brief ポートタイプの IOInfo
//////////////////////////////////////////////////////////////////////
class IOPortInfo :
public IOInfo
{
public:

  /// @brief コンストラクタ
  /// @param[in] port 関連付けられているポート
  /// @param[in] bit そのビット位置
  IOPortInfo(SbjPort* port,
	     ymuint bit);

  /// @brief デストラクタ
  virtual
  ~IOPortInfo();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ポートに関連付けられている時に true を返す．
  virtual
  bool
  is_port_type() const;

  /// @brief 関連付けられているポートを返す．
  ///
  /// is_port_type() == true の時のみ意味のある関数
  virtual
  SbjPort*
  port() const;

  /// @brief 関連付けられているポート上のビット位置を返す．
  ///
  /// is_port_type() == true の時のみ意味のある関数
  virtual
  ymuint
  port_bitpos() const;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // ポート
  SbjPort* mPort;

  // ビット位置
  ymuitn mBit;

};


//////////////////////////////////////////////////////////////////////
/// @class IODffInputInfo IOInfo.h "IOInfo.h"
/// @brief DFF に関連付けられているクラスの基底クラス
//////////////////////////////////////////////////////////////////////
class IODffInfo :
  public IOInfo
{
public:

  /// @brief コンストラクタ
  /// @param[in] dff 関連付けられているDFF
  IODffInfo(SbjDff* dff);

  /// @brief デストラクタ
  virtual
  ~IODffInfo();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 関連するDFFを返す．
  ///
  /// DFF関係のノードの時のみ意味のある関数．
  virtual
  SbjDff*
  dff() const;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // DFF
  SbjDff* mDff;

};


//////////////////////////////////////////////////////////////////////
/// @class IODffInputInfo IOInfo.h "IOInfo.h"
/// @brief DFFの入力タイプの情報を表すクラス
//////////////////////////////////////////////////////////////////////
class IODffInputInfo :
  public IODffInfo
{
public:

  /// @brief コンストラクタ
  /// @param[in] dff 関連付けられているDFF
  IODffInputInfo(SbjDff* dff);

  /// @brief デストラクタ
  virtual
  ~IODffInputInfo();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief DFFの入力の時 true を返す．
  virtual
  bool
  is_dff_input() const;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////


};


//////////////////////////////////////////////////////////////////////
/// @class IODffOUtputInfo IOInfo.h "IOInfo.h"
/// @brief DFFの出力タイプの情報を表すクラス
//////////////////////////////////////////////////////////////////////
class IODffOutputInfo :
  public IODffInfo
{
public:

  /// @brief コンストラクタ
  /// @param[in] dff 関連付けられているDFF
  IODffOutputInfo(SbjDff* dff);

  /// @brief デストラクタ
  virtual
  ~IODffOutputInfo();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief DFFの出力の時 true を返す．
  virtual
  bool
  is_dff_output() const;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////


};


//////////////////////////////////////////////////////////////////////
/// @class IODffClockInfo IOInfo.h "IOInfo.h"
/// @brief DFFのクロック端子の情報を表すクラス
//////////////////////////////////////////////////////////////////////
class IODffClockInfo :
  public IODffInfo
{
public:

  /// @brief コンストラクタ
  /// @param[in] dff 関連付けられているDFF
  IODffClockInfo(SbjDff* dff);

  /// @brief デストラクタ
  virtual
  ~IODffClockInfo();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief DFFのクロック端子の時 true を返す．
  virtual
  bool
  is_dff_clock() const;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////


};


//////////////////////////////////////////////////////////////////////
/// @class IODffClearInfo IOInfo.h "IOInfo.h"
/// @brief DFFのクリア端子の情報を表すクラス
//////////////////////////////////////////////////////////////////////
class IODffClearInfo :
  public IODffInfo
{
public:

  /// @brief コンストラクタ
  /// @param[in] dff 関連付けられているDFF
  IODffClearInfo(SbjDff* dff);

  /// @brief デストラクタ
  virtual
  ~IODffClearInfo();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief DFFのクリア端子の時 true を返す．
  virtual
  bool
  is_dff_clear() const;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////


};


//////////////////////////////////////////////////////////////////////
/// @class IODffPresetInfo IOInfo.h "IOInfo.h"
/// @brief DFFのセット端子情報を表すクラス
//////////////////////////////////////////////////////////////////////
class IODffPresetInfo :
  public IODffInfo
{
public:

  /// @brief コンストラクタ
  /// @param[in] dff 関連付けられているDFF
  IODffPrsetInfo(SbjDff* dff);

  /// @brief デストラクタ
  virtual
  ~IODffPresetInfo();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief DFFのセット端子の時 true を返す．
  virtual
  bool
  is_dff_preset() const;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////


};


//////////////////////////////////////////////////////////////////////
/// @class IOLatchInfo IOInfo.h "IOInfo.h"
/// @brief ラッチに関連付けられるタイプの基底クラス
//////////////////////////////////////////////////////////////////////
class IOLatchInfo :
  public IOInfo
{
public:

  /// @brief コンストラクタ
  /// @param[in] latch 関連付けられているラッチ
  IOLatchInfo(SbjLatch* latch);

  /// @brief デストラクタ
  virtual
  ~IOLatchInfo();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief 関連付けられているラッチを返す．
  ///
  /// ラッチ関係のノードの時のみ意味のある関数．
  virtual
  SbjLatch*
  latch() const;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////

  // ラッチ
  SbjLatch* mLatch;

};


//////////////////////////////////////////////////////////////////////
/// @class IOLatchInputInfo IOInfo.h "IOInfo.h"
/// @brief ラッチの入力タイプの情報を表すクラス
//////////////////////////////////////////////////////////////////////
class IOLatchInputInfo :
  public IOLatchInfo
{
public:

  /// @brief コンストラクタ
  /// @param[in] latch 関連付けられているラッチ
  IOLatchInputInfo(SbjLatch* latch);

  /// @brief デストラクタ
  virtual
  ~IOLatchInputInfo();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ラッチの入力の時 true を返す．
  virtual
  bool
  is_latch_input() const;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////


};


//////////////////////////////////////////////////////////////////////
/// @class IOLatchOutputInfo IOInfo.h "IOInfo.h"
/// @brief ラッチの出力タイプの情報を表すクラス
//////////////////////////////////////////////////////////////////////
class IOLatchOutputInfo :
  public IOLatchInfo
{
public:

  /// @brief コンストラクタ
  /// @param[in] latch 関連付けられているラッチ
  IOLatchOutputInfo(SbjLatch* latch);

  /// @brief デストラクタ
  virtual
  ~IOLatchOutputInfo();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ラッチの出力の時 truue を返す．
  virtual
  bool
  is_latch_output() const;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////


};


//////////////////////////////////////////////////////////////////////
/// @class IOLatchEnableInfo IOInfo.h "IOInfo.h"
/// @brief ラッチのイネーブル端子の情報を表すクラス
//////////////////////////////////////////////////////////////////////
class IOLatchEnableInfo :
  public IOLatchInfo
{
public:

  /// @brief コンストラクタ
  /// @param[in] latch 関連付けられているラッチ
  IOLatchEnableInfo(SbjLatch* latch);

  /// @brief デストラクタ
  ~IOLatchEnableInfo();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ラッチのイネーブル端子の時 true を返す．
  virtual
  bool
  is_latch_enable() const;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////


};


//////////////////////////////////////////////////////////////////////
/// @class IOLatchClearInfo IOInfo.h "IOInfo.h"
/// @brief ラッチのクリア端子の情報を表すクラス
//////////////////////////////////////////////////////////////////////
class IOLatchClearInfo :
  public IOLatchInfo
{
public:

  /// @brief コンストラクタ
  /// @param[in] latch 関連付けられているラッチ
  IOLatchClearInfo(SbjLatch* latch);

  /// @brief デストラクタ
  ~IOLatchClearInfo();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ラッチのクリア端子の時 true を返す．
  virtual
  bool
  is_latch_clear() const;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////


};


//////////////////////////////////////////////////////////////////////
/// @class IOLatchPresetInfo IOInfo.h "IOInfo.h"
/// @brief ラッチのセット端子の情報を表すクラス
//////////////////////////////////////////////////////////////////////
class IOLatchPresetInfo :
  public IOLatchInfo
{
public:

  /// @brief コンストラクタ
  /// @param[in] latch 関連付けられているラッチ
  IOLatchPresetInfo(SbjLatch* latch);

  /// @brief デストラクタ
  virtual
  ~IOLatchPresetInfo();


public:
  //////////////////////////////////////////////////////////////////////
  // 外部インターフェイス
  //////////////////////////////////////////////////////////////////////

  /// @brief ラッチのセット端子の時 true を返す．
  virtual
  bool
  is_latch_preset() const;


private:
  //////////////////////////////////////////////////////////////////////
  // 内部で用いられる関数
  //////////////////////////////////////////////////////////////////////


private:
  //////////////////////////////////////////////////////////////////////
  // データメンバ
  //////////////////////////////////////////////////////////////////////


};

END_NAMESPACE_YM_SBJ

#endif // IOINFO_H
